
/*  Code for Final Demo 12-14 April
*/

#include <math.h>
#include <FastLED.h>
FASTLED_USING_NAMESPACE;
#define PIN D4
#define NUM_LEDS 32
#define PIN_SOUND_SENSOR A0
#define PIN_SERVO D3
#define MAX_SERVO_SPEED 125
#define SERVO_DELAY_TIME 30
CRGB leds[NUM_LEDS];
// Parameter 1 = number of pixels in strip
// Parameter 2 = pin number (most are valid)
// Parameter 3 = pixel type flags, add together as needed:
//   NEO_KHZ800  800 KHz bitstream (most NeoPixel products w/WS2812 LEDs)
//   NEO_KHZ400  400 KHz (classic 'v1' (not v2) FLORA pixels, WS2811 drivers)
//   NEO_GRB     Pixels are wired for GRB bitstream (most NeoPixel products)
//   NEO_RGB     Pixels are wired for RGB bitstream (v1 FLORA pixels, not v2)
Servo myServo;// create servo object using the built-in Particle Servo Library

int servoSpeed = 0;
int servoPos = 0;
bool dirUp = true;
int soundOut = 0;
int soundThreshold = 1000;
int soundTrigger=0;

void setup() {
  FastLED.addLeds<WS2811, PIN, GRB>(leds, NUM_LEDS).setCorrection( TypicalLEDStrip );
  Particle.function("SoundMode", soundMode);
  Particle.variable("sound" , &soundTrigger , INT );
  pinMode(PIN_SOUND_SENSOR, INPUT);
  myServo.attach(PIN_SERVO);  //Initialize the servo attached to pin D0
  myServo.write(0);
}

void loop() { 
    if(soundTrigger==0){
        lightControl(-1);
        delay(10);
    }
    else if(soundTrigger==1){
        lightControl(0);
        Serial.println(analogRead(PIN_SOUND_SENSOR));
        delay(10);
    }
    else if(soundTrigger==2){
        soundOut = analogRead(PIN_SOUND_SENSOR);
        Serial.println(soundOut);
        lightControl(soundOut);
        delay(10);
    } 
    else{
        lightControl(1100);
        delay(10);
    }
  
}

int soundMode(String command){
    soundTrigger=command.toInt();
    return -1;
}

int lightControl(int effect) {
    if (effect<0){
        setAll(0x00,0x00,0x00);
        servoSpeed=0;
    }
    else if (effect < soundThreshold) {
    meteorRain(0x00,0x26,0x40,4, 16, true, 20);
    servoSpeed = 0;
    //RGBLoop();
    } 
    else {
    theaterChaseRainbow(10);
    servoSpeed = 90;
  }
  servoControl();
  return 0;
}

int servoControl() {
  if(servoSpeed == 0)
    return 0;
  if (dirUp) {
    
    // for (int i = servoPos; i < servoPos+servoSpeed; i++) {
    //     myServo.write(servoPos);
    //     delay(40/servoSpeed);
    // }
    // servoPos+=servoSpeed;
    servoPos = 180;
    myServo.write(servoPos);
    if (servoPos >= 180)
      dirUp = !dirUp;
  } else {
    // for (int i = servoPos; i > servoPos-servoSpeed; i--) {
    //     myServo.write(servoPos);
    //     delay(40/servoSpeed);
    // }
    // servoPos-=servoSpeed;
    servoPos = 0;
    myServo.write(servoPos);
    if (servoPos <= 0)
      dirUp = !dirUp;
  }
  return 0;
}

void showStrip() {
 #ifdef ADAFRUIT_NEOPIXEL_H 
   // NeoPixel
   strip.show();
 #endif
 #ifndef ADAFRUIT_NEOPIXEL_H
   // FastLED
   FastLED.show();
 #endif
}

void setPixel(int Pixel, byte red, byte green, byte blue) {
 #ifdef ADAFRUIT_NEOPIXEL_H 
   // NeoPixel
   strip.setPixelColor(Pixel, strip.Color(red, green, blue));
 #endif
 #ifndef ADAFRUIT_NEOPIXEL_H 
   // FastLED
   leds[Pixel].r = red;
   leds[Pixel].g = green;
   leds[Pixel].b = blue;
 #endif
}

void setAll(byte red, byte green, byte blue) {
  for(int i = 0; i < NUM_LEDS; i++ ) {
    setPixel(i, red, green, blue); 
  }
  showStrip();
}

//EFFECT 0 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~//
void RGBLoop(){
  for(int j = 0; j < 3; j++ ) { 
    // Fade IN
    for(int k = 0; k < 25; k++) { 
      switch(j) { 
        case 0: setAll(k,0,0); break;
        case 1: setAll(0,k,0); break;
        case 2: setAll(0,0,k); break;
      }
      showStrip();
      delay(1);
    }
    // Fade OUT
    for(int k = 25; k >= 0; k--) { 
      switch(j) { 
        case 0: setAll(k,0,0); break;
        case 1: setAll(0,k,0); break;
        case 2: setAll(0,0,k); break;
      }
      showStrip();
      delay(1);
    }
  }
}

//EFFECT 1~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~//
void RunningLights(byte red, byte green, byte blue, int WaveDelay) {
  int Position=0;
  
  for(int i=0; i<NUM_LEDS*2; i++)
  {
      Position++; // = 0; //Position + Rate;
      for(int i=0; i<NUM_LEDS; i++) {
        // sine wave, 3 offset waves make a rainbow!
        //float level = sin(i+Position) * 127 + 128;
        //setPixel(i,level,0,0);
        //float level = sin(i+Position) * 127 + 128;
        setPixel(i,((sin(i+Position) * 127 + 128)/255)*red,
                   ((sin(i+Position) * 127 + 128)/255)*green,
                   ((sin(i+Position) * 127 + 128)/255)*blue);
      }
      
      showStrip();
      delay(WaveDelay);
  }
}

//EFFECT 2 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~//
void theaterChaseRainbow(int SpeedDelay) {
  byte *c;
  
  for (int j=215; j > 185; j--) {     // cycle all 256 colors in the wheel
    for (int q=0; q < 3; q++) {
        for (int i=0; i < NUM_LEDS; i=i+3) {
          c = Wheel( (i+j) % 255);
          setPixel(i+q, *c, *(c+1), *(c+2));    //turn every third pixel on
        }
        showStrip();
       
        delay(SpeedDelay);
       
        for (int i=0; i < NUM_LEDS; i=i+3) {
          setPixel(i+q, 0,0,0);        //turn every third pixel off
        }
    }
  }
}

byte * Wheel(byte WheelPos) {
  static byte c[3];
  
  if(WheelPos < 85) {
   c[0]=WheelPos * 3;
   c[1]=255 - WheelPos * 3;
   c[2]=0;
  } else if(WheelPos < 170) {
   WheelPos -= 85;
   c[0]=255 - WheelPos * 3;
   c[1]=0;
   c[2]=WheelPos * 3;
  } else {
   WheelPos -= 170;
   c[0]=0;
   c[1]=WheelPos * 3;
   c[2]=255 - WheelPos * 3;
  }

  return c;
}

//EFFECT 3~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~//
void meteorRain(byte red, byte green, byte blue, byte meteorSize, byte meteorTrailDecay, boolean meteorRandomDecay, int SpeedDelay) {  
  setAll(0,0,0);
  
  for(int i = 0; i < NUM_LEDS+NUM_LEDS; i++) {
    
    
    // fade brightness all LEDs one step
    for(int j=0; j<NUM_LEDS; j++) {
      if( (!meteorRandomDecay) || (random(10)>5) ) {
        fadeToBlack(j, meteorTrailDecay );        
      }
    }
    
    // draw meteor
    for(int j = 0; j < meteorSize; j++) {
      if( ( i-j <NUM_LEDS) && (i-j>=0) ) {
        setPixel(i-j, red, green, blue);
      } 
    }
   
    showStrip();
    delay(SpeedDelay);
  }
}

void fadeToBlack(int ledNo, byte fadeValue) {
 #ifdef ADAFRUIT_NEOPIXEL_H 
    // NeoPixel
    uint32_t oldColor;
    uint8_t r, g, b;
    int value;
    
    oldColor = strip.getPixelColor(ledNo);
    r = (oldColor & 0x00ff0000UL) >> 16;
    g = (oldColor & 0x0000ff00UL) >> 8;
    b = (oldColor & 0x000000ffUL);

    r=(r<=10)? 0 : (int) r-(r*fadeValue/256);
    g=(g<=10)? 0 : (int) g-(g*fadeValue/256);
    b=(b<=10)? 0 : (int) b-(b*fadeValue/256);
    
    strip.setPixelColor(ledNo, r,g,b);
 #endif
 #ifndef ADAFRUIT_NEOPIXEL_H
   // FastLED
   leds[ledNo].fadeToBlackBy( fadeValue );
 #endif  
}

//add effect here, replace the code in the loop() function

